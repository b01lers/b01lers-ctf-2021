# largely similar to a VolgaCTF Qual solver
#
#  https://github.com/ashutosh1206/Crypto-CTF-Writeups/blob/master/2018/b00t2root'18/RSA-2/exploit.sage


from sage.all import *
import binascii, sys

# there is no specialized gcd for general poly rings in sage
# so use a standard alg
def gcd(a, b): 
    iter = 0
    while b:
        a, b = b, a % b
        iter += 1
        if (iter % 100) == 0:
           sys.stderr.write(".")
           sys.stderr.flush()
    return a.monic()

# linearly related message attack: m1 = x       -> enc(m1) = C1
#                                  m2 = a*x + b -> enc(m2) = C2
def franklinreiter(C1, C2, a, b, e, N):
    P.<x> = PolynomialRing(Zmod(N))
    g1 = x^e - C1
    g2 = (a * x + b) ^ e - C2
    res = -gcd(g1, g2).coefficients()[0]
    return int(res)


# whether we are breaking the test server, or the real one
#testing = True
testing = False

b0=526660926784610382670150185064472615
b1=2819367069389517626
Npost=8
a= 1 << (8 * Npost)

# test server -> 35-40 minutes on my laptop (single core)
if testing:
   e=11111
   N=1474056861600508750536414188996750927648096481666621782046870162885970002056558678575504071690935796725014547177867733491376316556335164712785779345135993839044169678678430144366050954171364130041722397740237412974840021322955284971391378606879782525776101197138246098779247504068525787507211066653094182375062172648015252981722050023546578739713878540020112683535959455980908759852994886899616871168334463650443726621322707723545863172047496899487590244734204049
   C1= 606680878863262569956756959999571129575887857606515504464840969289546706656668978894074352084203976406269555496292089946865186481576792198638213431377326822543779800819523723621213464197339342300600189661906180553517703154337985218044613935094622955003947164910438518431256943908989204321543617304883428424202825972496339537647310380688877085353181407385785255094338501360374737620026279557167801594552500135038079920108558851420384119738625470763744372049192631
   C2= 204078132735908400665023509430234595083593563574654566094490432321620357473007833907950414883686936388873423318521200550173800436246425944898039122469361266643028390757804216346177593043898934015217315957045757847623812385515322981716742409937283776342917426124254575358849305137368363072218259408560648794723372735372782274914961720150134425455627751208380446567309586439843751863888693683061238663044938483738754839837515078931868153608841423006294988717272295

   # check up front that it will indeed be the root
   xbytes = b"fakeflag{This is not the real flag!!}"
   x = int.from_bytes(xbytes, "big")
   b = (b0 << (8 * (len(xbytes) + Npost)) ) + b1 
   x2 = int(a * x + b)
   print(x2.to_bytes(64, "big"))

   print(f"p1(x)= {pow(x, e, N) - C1}")
   print(f"p2(x)= {pow(a * x + b, e, N) - C2}")

# challenge
else:
   e=12397    #-> ~6 min/check => 2.5 hours on 2 cores on my notebook
   N=22773501054316189978847426447297976555294712196635711619548646535714349108673592536268901773559128452119139837790241960739406771052120064104023220398906880827527087247425436548928353656972875367426973981467016072783510437703982882407156397664868084974299881499614685231414426733661535600931674239270779081052646773860836872606697808969130311968768581786751582363716815545771556893913833591445390392262991895794399880537305863766499747621897617172453506490232685403030443855749834521879936774363977709894706639695250630108541003751274695379056107906602622564780555249131557008571223117101450512292660697307893910788607
   C1= 1573844311735068898863815935184069202731438431603026129838853216178036137420196306894006970253478657678222293692070675296240972621626173280102851358220107482687451208953689979270472914964894260233461828507287082878119388765528614034053728507974188739814269301866117654535461397515521741418156501788092437545995749481883904888940715567087666924708946316996595365960489871647618959699648867976086197426725703015710883861931974321738561901996546920344836173565570701337003005209465384684031755749902687976472668964173396051381626237105887947026234029408001876323637160551575258937019565331351851314722609262792254753945
   C2= 13039555960031916312127418664989286574487399839777326328093860547156037217704704646072909161087310455792898279207742827855450478461300808177883027113874734354645648028434458006733114589770758646049618086307434092769969219953933312139733859202171017268774494214487316877994030354074770503337561081618168940638826365480137853892103220886228726682858583718099713196793320991103419202031946062701954451169495577190403638911713963126922592454471968547094162989478060417008494185108401596980274993032945104651927711480217185566871851659840437663735224687049117310049099928797427079430327288870095093589384070701489919624045


# try progressively longer flags in the range [Nlo, Nhi)

import sys

Nlo = int(sys.argv[1])  if  len(sys.argv) > 1  else  10
Nhi = int(sys.argv[2])  if  len(sys.argv) > 2  else  100

for Nflag in range(Nlo, Nhi):
   b = (b0 << (8 * (Nflag + Npost))) + b1
   flagx = franklinreiter(C1, C2, a,  b, e, N)
   if flagx == N - 1:   # gcd == 1
      print(Nflag)
   else:   # gcd != 1
      print(Nflag, hex(flagx) )
      flag = binascii.unhexlify( hex(flagx)[2:] )   # sage 9.1 (sage 7 adds a trailing L)
      print(Nflag, flag)
      if testing:
         if b"fakeflag{" in flag: break
      else:
         if b"bctf{" in flag: break
